# ---------------------------------------------------------------

cmake_minimum_required(VERSION 3.5...3.29)

if (${CMAKE_VERSION} VERSION_LESS 3.12)
    cmake_policy(VERSION ${CMAKE_VERSION})
endif()

# ---------------------------------------------------------------

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# ---------------------------------------------------------------

# set(ENV{PATH} "$ENV{PATH}:/usr/local/bin")
# message("PATH: " $ENV{PATH})

# ---------------------------------------------------------------

set(SOURCE src/clock_main.cpp)
# unset(SOURCE) or set(SOURCE) -> $(SOURCE) == ""
get_filename_component(NAME_EXE ${SOURCE} NAME_WE)

add_executable(${NAME_EXE} ${SOURCE})

message("SOURCE: " ${SOURCE} " NAME_EXE: " ${NAME_EXE})

# ---------------------------------------------------------------

set(BUILD_EXE FALSE
    CACHE BOOL
    "Erzeugt eine zweite ausf√ºhrbare Datei"
    )

if(${BUILD_EXE})
    add_executable(
        ${NAME_EXE}_2 ${SOURCE}
    )
endif()

set(CACHE_FILEPATH ""
    CACHE FILEPATH
    "Beispiel Cache Variable Filepath"
    )

set(CACHE_PATH ""
    CACHE PATH
    "Beispiel Cache Variable Path"
    )

set(CACHE_INTERNAL ""
    CACHE FILEPATH
    "Beispiel Cache Variable Internal"
    FORCE
    )

set(CACHE_STRING ""
    CACHE STRING
    "Beispiel Cache Variable String"
    )

# set_property(CACHE CACHE_STRING
#    PROPERTY STRINGS
#    "Option1" "Option2" "Option3"
#    )

# ---------------------------------------------------------------

project(Project_${NAME_EXE}
    VERSION 0.1.0
    DESCRIPTION "Cpp Tutorial Project"
    LANGUAGES C CXX)

# ---------------------------------------------------------------
message("CMAKE_CURRENT_SOURCE_DIR: " ${CMAKE_CURRENT_SOURCE_DIR})

target_include_directories(
    ${NAME_EXE}
    PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# include_directories(
#     ${NAME_EXE}
#     PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include
# )

# ---------------------------------------------------------------

set_target_properties(${NAME_EXE} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY
    "${CMAKE_CURRENT_SOURCE_DIR}/bin"
)

# ---------------------------------------------------------------

# set(OSBitness 32)
# if(CMAKE_SIZEOF_VOID_P EQUAL 8)
#     set(OSBitness 64)
# endif()

# set(FullOutputDir "${CMAKE_CURRENT_SOURCE_DIR}/bin/${CMAKE_SYSTEM_NAME}$#{OSBitness}/${CMAKE_BUILD_TYPE}")

# set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${FullOutputDir}/static libs")
# set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${FullOutputDir}")
# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${FullOutputDir}")

# set_target_properties(${NAME_EXE} PROPERTIES
#     RUNTIME_OUTPUT_DIRECTORY "${FullOutputDir}"
# )

# ---------------------------------------------------------------

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)

# ---------------------------------------------------------------
# ---------------------------------------------------------------

include(CTest)
enable_testing()

# Include GTest package
find_package(GTest REQUIRED)

# Locate GTest package
find_package(GTest REQUIRED)

# Add test executable
add_executable(tester test/tester.cpp src/clock.cpp)

# Link against GTest and pthread library
target_link_libraries(test GTest::gtest GTest::gtest_main pthread)

# Add the test to CTest
add_test(NAME tester COMMAND tester)

# ---------------------------------------------------------------
# ---------------------------------------------------------------