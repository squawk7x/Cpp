/*

C++ 03 only:
1. default constructor (generated only if no constructor is declared by user)
2. copy constructor (generated only if no 5, 6 declared by user)
3. copy assignment operator (generated only if 5,6 not declared by user)
4. destructor

C++ 03:
1. default constructor (generated only if no constructor 2 or 5 is declared by user)
2. copy constructor (generated only if no 3, 4, 5, 6 declared by user)
3. copy assignment operator (generated only if 2, 4, 5, 6 not declared by user)
4. destructor

C++ 11:
move constructor (generated only if 2,3,4,6 not declared by user)
6. move constructor (generated only if 2,3,4,5 not declared by user)

 __________________________________________________________
|               ... Autogenerated if no ...
|__________________________________________________________|
|   -------------------------------------------------------|
|     |   1        2        3        4        5        6   |
|     |                                                    | 
|  1  |   -                                                |
|  2  |   2        -       (2)                2        2   |
|  3  |           (3)       -                 3        3   |
|  4  |           (4)      (4)       -        4        4   |
|  5  |   5        5        5                 -        5   |
|  6  |            6        6                 6        -   |
|__________________________________________________________|

*/
class Cow { // 1, 2, 4 // delete seen as declared by user (2 is deprecated)
    Cow &operator=(const Cow &) = delete; // copy assignment operator
    Cow(const Cow &) = default;           // copy constructor
};

class Dog { // 1, 2, 3, 4, 5, 6
    // C++ 03:
    Dog();                      // default constructor
    Dog(const Dog &);           // copy constructor
    Dog operator=(const Dog &); // copy assignment operator
    ~Dog();                     // destructor

    // C++ 11:
    Dog(Dog &&);                  // move constructor
    Dog &operator=(const Dog &&); // move assignment operator
};

class Cat {             // 3, 4 (3 is deprecated)
    Cat(const Cat &){}; // copy constructor
};

class Duck {       //  4 class cannot be copied
    Duck(Duck &&); // move constructor
};

class Frog { // 4
    Frog(Frog &&, int = 0) {
    }                              // move constructor
    Frog(int = 0){};               // default constructor
    Frog(const Frog &, int = 0){}; // copy constructor
};

class Fish { // 1, 2, 3 (2, 3 are deprecated)
    ~Fish() {
    } // destructor
};
