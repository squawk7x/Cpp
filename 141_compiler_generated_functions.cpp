#include <iostream>
#include <string>
using namespace std;

// class dogBase {};

// =>   compiler generated functions
//      equivalent to:

// class dogGen {
// public:
//     dogGen(){} // 1. call base class default constructor
//                       // 2. call data members default constructor
//     dogGen(const dogGen &rhs){} // Member by member initialization
//     dogGen operator=(
//         const dogGen &rhs){} // Member by member copying
//     ~dogGen(){}              // 1. call base class destructor
//                                     // 2. call data members destructor
// };

class dog {
    string m_name;

public:
    dog(string name = "Bob") {
        m_name = name;
        cout << name << " is born." << endl;
    }
    ~dog() {
        cout << m_name << " is destroyed." << endl;
    }
};

// int main(int argc, char *argv[]) {
//     dog dog1("Henry");  // default constructor
//     dog dog2;
//     dog2 = dog1;        // copy assignment operator

//     return 0;
// }

class collar {
public:
    collar() = default;
    collar(string color) {
        cout << "collar is born." << endl;
    }
    // collar() {cout << "collar is born." << endl;}
};

class dogC {
    collar m_collar;
    string &m_name;
};

int main(int argc, char *argv[]) {
    dogC dog1;
}

/*
1. They are public and inline.
2. They are generated only when needed.
*/

/*

Member function	typical form for class C:
-----------------------------------------
1. Default constructor	C::C();
2. Destructor	        C::~C();

3. Copy constructor	    C::C (const C&) or C::C(const &C c);    //shallow or hard copy
4. Copy assignment	    C& operator= (const C&);

5. Move constructor	    C::C (C&&) or C::C(C&& c);  //shallow or hard copy
6. Move assignment	    C& operator= (C&&);


Member function	    implicitly defined:	                                                    default definition:
Default constructor	if no other constructors	                                            does nothing
Destructor	        if no destructor	                                                    does nothing
Copy constructor	if no move constructor and no move assignment	                        copies all members
Copy assignment	    if no move constructor and no move assignment	                        copies all members
Move constructor	if no destructor, no copy constructor and no copy nor move assignment	moves all members
Move assignment	    if no destructor, no copy constructor and no copy nor move assignment	moves all members

 __________________________________________________________
|               ... autogenerated if no ...                |
|__________________________________________________________|
|     |   1        2        3        4        5        6   |
|     |                                                    | 
|  1  | self                                               |
|  2  |   2      self                         2        2   |
|  3  |                   self                3        3   |
|  4  |                            self       4        4   |
|  5  |   5        5        5               self       5   |
|  6  |            6        6                 6      self  |
|__________________________________________________________|


Note:
1. They are public and inline.
2. They are generated only if they are needed.

*/
class Cow { // 1, 2, 4 // delete seen as declared by user
    Cow &operator=(const Cow &) = delete; // copy assignment operator
    Cow(const Cow &) = default;           // copy constructor
};

class Dog { // 1, 2, 3, 4, 5, 6
    // C++ 03:
    Dog(); // default constructor
           // 1. calls base class constructor
           // 2. calls data member's default constructor

    Dog(const Dog &); // copy constructor: member by member initialization

    Dog operator=(
        const Dog &); // copy assignment operator: member by member copying

    ~Dog(); // destructor
            // 1. calls base class destructor
            // 2. calls data member's default destructor

    // C++ 11:
    Dog(Dog &&); // move constructor

    Dog &operator=(const Dog &&); // move assignment operator
};

class Cat {
    Cat(const Cat &){}; // copy constructor
};

class Duck {       //  4 // class cannot be copied
    Duck(Duck &&); // move constructor
};

class Frog { // 4
    Frog(Frog &&, int = 0) {
    }                              // move constructor
    Frog(int = 0){};               // default constructor
    Frog(const Frog &, int = 0){}; // copy constructor
};

class Fish { // 1, 2, 3
    ~Fish() {
    } // destructor
};
